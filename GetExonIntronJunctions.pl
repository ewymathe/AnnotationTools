#!/usr/local/bin/perl
# Script that takes in a gtf file (e.g. refseq) and determines all intron/exon and exon/intron junctions:
# 	- For + strand, the end of exon1, begining of exon2, end of exon 2, beginning of exon3, ..., beginning of last exon
# 	- For - strand, the beginning of last exon, ... , end of first exon
# The coordinate returned is one-based
# 06/25/14
# Ewy Mathe
use strict;
use warnings;
use Pod::Usage;
use List::Util 'max';

sub uniq {
    my %seen;
    grep !$seen{$_}++, @_;
}

pod2usage("Usage: $0 in.gtf refseq.nomir.numexon.txt outjunctions.txt\nScript that takes in a gtf file (e.g. refseq) and determines all intron/exon and exon/intron junctions:\n refseq.nomir.numexon.txt is the number of exons per gene (generated by ./GetNumberExonsPerGene.pl) \n - For + strand, the end of exon1, begining of exon2, end of exon 2, beginning of exon3, ..., beginning of last exon\n  - For - strand, the beginning of last exon, ... , end of first exon\n") if ((@ARGV !=3));

#Open files
open(my $in, "<", $ARGV[0]) or die "Can't open $ARGV[0] !";
open(my $numexon, "<", $ARGV[1]) or die "Can't open $ARGV[1]!";
open(my $out, ">", $ARGV[2]) or die "Can't open $ARGV[2] !";

# Read in exon numbers for each gene in a hash
my %numexons=();
while (my $line=<$numexon>) {
	chomp($line);
	my ($gene,$num)=split(/\t/,$line);
	$numexons{$gene}=$num;
}
close($numexon) or die "Can't close $numexon\n";


my $line=<$in>;
chomp($line);
my ($chrom,$temp1,$temp2,$start,$end,$temp3,$strand,$temp4,$annot)=split(/[\t]+/, $line);
my ($gid,$gname,$transid,$tssid,$exon)=split(/[;]+/,$annot);
my ($temp,$exon_num)=split(/ exon_number/,$exon);
#print "$chrom\t$start\t$end\t$strand\t$exon_num\n";
my $count = 0; # counter that keeps track of the number of different exons for each gene
my @junctions=(); # IE = intron-exon junction; EI = exon-intron junction
if ($numexons{$gname} == 1) {next;} # only one exon so no junctions
if ($exon_num == 1 && $strand eq "-") { # the start of exon 1 in the negative strand is the TSS, not a junction
	$junctions[$count]=$end;$count++;
}
elsif ($exon_num eq $numexons{$gname} && $strand eq "-") { # the end of the last exon in the - strand is the TES, not a junction
	$junctions[$count]=$start+1;$count++;
}
elsif ($exon_num == $numexons{$gname} && $strand eq "+") { # the end of the last exon in the + strand is the TES, not a junction
	$junctions[$count]=$start+1;$count++;
}
elsif ($exon_num == 1 && $strand eq "+") { # the start of the first exon in the positive strand is the TSS, not a junction
	$junctions[$count]=$end;$count++;
}
else {
	$junctions[$count]=$start+1;$count++;
	$junctions[$count]=$end;$count++;
}
my ($newchrom,$newtemp1,$newtemp2,$newstart,$newend,$newtemp3,$newstrand,$newtemp4,$newannot,$newgid,$newgname,$newtransid,$newtssid,$newexon)=();
my ($newtemp,$newexon_num)=();

while(my $line=<$in>) {
	chomp($line);
	($newchrom,$newtemp1,$newtemp2,$newstart,$newend,$newtemp3,$newstrand,$newtemp4,$newannot)=split(/[\t]+/, $line);
	($newgid,$newgname,$newtransid,$newtssid,$newexon)=split(/[;]+/,$newannot);
	($newtemp,$newexon_num)=split(/ exon_number/,$newexon);
	#print "$newchrom\t$newstart\t$newend\t|$newstrand|\t$newexon\n";
	
	if ($numexons{$newgname} == 1) {next;} # only one exon so no junctions
	if ($newgname eq $gname) { # Working on same gene, update arrays
		if ($newexon_num == 1 && $newstrand eq "-") { # the start of exon 1 in the negative strand is the TSS, not a junction
			$junctions[$count]=$newend;$count++;
		}
		elsif ($newexon_num eq $numexons{$newgname} && $newstrand eq "-") { # the end of the last exon in the - strand is the TES, not a junction
			$junctions[$count]=$newstart+1;$count++;
		}
		elsif ($newexon_num == $numexons{$newgname} && $newstrand eq "+") { # the end of the last exon in the + strand is the TES, not a junction
			$junctions[$count]=$newstart+1;$count++;
		}
		elsif ($newexon_num == 1 && $newstrand eq "+") { # the start of the first exon in the positive strand is the TSS, not a junciton
			$junctions[$count]=$newend;$count++;
		}
		else {
			$junctions[$count]=$newstart+1;$count++;
			$junctions[$count]=$newend;$count++;
		}
	}
	else { # new gname encountered
		# now print
		my @uniqjunctions=uniq(@junctions);
		if ($strand eq "+") {	
			#print $out "Printing $#junctions -1 junctions\n";
			for (my $ind=0; $ind <= ($#uniqjunctions); $ind++) { # Skip 1st and last since these are not junctions
				print $out "$gname\t$chrom\t$uniqjunctions[$ind]\t$strand\t";
				if ($ind % 2) {print $out "exon-intron\n";}
				else {print $out "intron-exon\n";}
			}
		}
		elsif ($strand eq "-") {
			#print $out "Printing $#junctions -1 junctions (neg strand, from within while)\n";
			for (my $ind=0; $ind <= ($#uniqjunctions); $ind++) { # Skip 1st and last since these are not junctions
				print $out "$gname\t$chrom\t$uniqjunctions[$ind]\t$strand\t";
				if ($ind % 2) {print $out "intron-exon\n";}
				else {print $out "exon-intron\n";}
			}
		}
		else {print "ERROR!!! The strand is not right!  It is $strand\n"; exit;}
		# Reset parameters
		$count = 0;
		@junctions=();
		$gname=$newgname;
		$chrom=$newchrom;
		$strand=$newstrand;
		if ($newexon_num == 1 && $newstrand eq "-") {$junctions[$count]=$newend;$count++;}
		elsif ($newexon_num eq $numexons{$newgname} && $newstrand eq "-") {$junctions[$count]=$newstart+1;$count++;}
		elsif ($newexon_num == $numexons{$newgname} && $newstrand eq "+") {$junctions[$count]=$newstart+1;$count++;}
		elsif ($newexon_num == 1 && $newstrand eq "+") {$junctions[$count]=$newend;$count++;}
		else {$junctions[$count]=$newstart+1;$count++;$junctions[$count]=$newend;$count++;}
	}
	# print "exon: |$exon|; newexon:$newexon\n";
	$exon=$newexon;
}

# print last entryi
print "Counter is $count\n";
my @uniqjunctions=uniq(@junctions);
if ($newgname eq $gname) {
	if ($strand eq "+") {
		for (my $ind=0; $ind <= ($#uniqjunctions); $ind++) { # Skip 1st and last since these are not junctions
			print $out "$gname\t$chrom\t$uniqjunctions[$ind]\t$strand\t";
			if ($ind % 2) {print $out "exon-intron\n";}
			else {print $out "intron-exon\n";}	
		}
	}
	elsif ($strand eq "-") {
		for (my $ind=0; $ind <= ($#uniqjunctions); $ind++) { # Skip 1st and last since these are not junctions
			print $out "$gname\t$chrom\t$uniqjunctions[$ind]\t$strand\t";
			if ($ind % 2) {print $out "intron-exon\n";}
			else {print $out "exon-intron\n";}
		}
	}
}


close($in) or die "Can't close $in\n";
close($out) or die "Can't close $out\n";
exit;

